{"postCollection":{"items":[{"sys":{"publishedAt":"2020-08-07T22:53:51.007Z"},"tags":["react"],"url":"reducir-aplicacion-en-react","banner":{"url":"https://images.ctfassets.net/vlyc7nduv4id/4CEkAGWW1RmFFOm4snUZQJ/3c5af0f63b9c1d05dda37514a02393f1/banner.jpg","title":"banner"},"title":"Reduce tu aplicaci√≥n de React hasta en un 50% üò±","description":"Cuando creas una aplicaci√≥n en React todo parece magia hasta que ves el chunk final ... 38kb para una app que solo muestra un Hello World üò∞, en este art√≠culo mostraremos como disminuir el tama√±o final de tu app en 2 sencillos pasos.","contentMd":"## 1. Instala cra-preact en tu aplicaci√≥n\n```bash\nnpm i cra-preact\n```\n## 2. Remplaza con react-scripts\nSimplemente cambia los comandos start, build y test de tu package.json por estos:\n\ny listo eso es todo.\n\n__MUCHAS GRACIAS POR LEER ESTE ARTICULO, RECUERDA COMPARTIRLO EN TUS REDES SOCIALES SI TE FUE UTIL Y NO OLVIDES CALIFICAR ESTE POST.__","author":"Alex Santos"},{"sys":{"publishedAt":"2020-08-07T20:43:04.227Z"},"tags":["react","javascript"],"url":"aplicacion-de-alto-rendimiento-react","banner":{"url":"https://images.ctfassets.net/vlyc7nduv4id/6Akav6QRJay9lUPZ5hllGd/66992ad653db6faf1a2b4a9b288428bd/banner.jpeg","title":"banner"},"title":"Como crear una aplicaci√≥n de alto rendimiento y escalabilidad con React","description":"¬øRedux o Context, CSS Module o Style-Components?, Esta es una recopilaci√≥n de mi experiencia creando aplicaciones con React enfocadas a tener un buen rendimiento y que principalmente sean f√°ciles de mantener y escalar en un equipo de desarrollo diverso.","contentMd":"Dicho esto cabe mencionar que para aplicaciones con tiempo limitado de desarrollo utilizo el CLI de React (Create React App) pero para aplicaciones m√°s complejas y con mayor tiempo siempre recomiendo hacer un eject del proyecto con CRA o bien crear uno nuevo con WebPack y Babel.\n## 1. Dependencias de Desarrollo\n### 1.1 Formato\nCasi para cualquier proyecto y equipo es necesario mantener una misma estructura y m√°s importante a√∫n mantener las mismas convenciones en el c√≥digo, por lo tanto, una de las dependencias que siempre (o en su mayor√≠a) incluimos en los proyectos es Prettier. Esto me ha facilitado mucho la revisi√≥n de c√≥digo con mis compa√±eros y como project manager la calidad del c√≥digo, Prettier te permite darle un formato √∫nico al c√≥digo es decir se incluyen las mismas convenciones, las mismas estructuras y los mismos patrones a cada parte del c√≥digo, esto permite que el c√≥digo siempre parezca estar escrito de la misma forma a pesar de estar colaborando con alguien m√°s, Prettier no solo me ha ayudado a darle formato al c√≥digo sino a mantener su calidad por qu√© se evitan muchas cosas b√°sicas pero tediosas en un equipo como usar o no el (‚Äò ; ‚Äò) en cada linea o el uso tabs/spaces, etc.\n\nEste es el archivo de configuraci√≥n para Prettier que generalmente utilizamos en los proyectos:\n```json\n{\n  \"trailingComma\": \"es5\",\n  \"printWidth\": 100,\n  \"semi\": false,\n  \"useTabs\": true,\n  \"tabWidth\": 2,\n  \"singleQuote\": true,\n  \"endOfLine\": \"auto\",\n  \"jsxSingleQuote\": true,\n  \"jsxBracketSameLine\": true\n}\n```\nPrettier funciona muy bien a nivel de c√≥digo pero algunos IDEs tienen conflicto especialmente con el identado ya que tienen una configuraci√≥n diferente de formato al momento de editar, por supuesto existen extensiones que permiten seguir el formato de Prettier mientras se edita, pero para evitar cualquier tipo de problemas agregamos un archivo .editorconfig con reglas iguales a las de Prettier para que el editor lo aplique al c√≥digo aun cuando se est√° escribiendo, esto no es necesario pero evita muchos errores y ahorra tiempo evitando correr Prettier (at BuildTime).\n\nEste es el archivo de configuraci√≥n para editorconfig que generalmente utilizamos en los proyectos:\n```editorconfig\n# editorconfig.org\nroot = true\n\n[*]\nindent_style = tab\nindent_size = 2\ntab_width = 2\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n```\nPor √∫ltimo pero no menos importante es el uso de TypeScript y su linter tal como con JavaScript vanilla tenemos ESLint con TypeScript tenemos TSLint, este es uno de los puntos m√°s importantes a la hora de dar formato al c√≥digo por qu√© si bien es cierto Prettier nos ayuda darle un mejor aspecto al c√≥digo con tslint podemos lograr que incluso tenga la misma calidad y el mismo rendimiento, ¬øC√≥mo?, limitando el uso de m√©todos, patrones y estrategias frente a problemas comunes, tslint trabaja directamente con el compilador y a su vez con el IDEs si tenemos las extensiones correctas para mostrar alertas, mensajes e incluso errores al escribir c√≥digo, por ejemplo usar for-in en lugar de for normal, no dejar console.logs, solo utilizar funciones flecha entre muchas otras cosas, y lo mejor de todo es que estas reglas pueden adaptarse perfectamente a JSX por ejemplo declarar el valor booleano de una propiedad expl√≠citamente, no utilizar arrow functions dentro del return de nuestro componente, y forzar el cierre de cualquier etiqueta JSX sin hijos.\n\nEste es el archivo tslint que utilizamos frecuentemente:\n```json\n{\n\t\"extends\": [\n\t\t\"tslint:latest\",\n\t\t\"tslint-react\",\n\t\t\"tslint-config-prettier\"\n\t],\n\t\"rulesDirectory\": [\n\t\t\"tslint-plugin-prettier\"\n\t],\n\t\"rules\": {\n\t\t\"prettier\": true,\n\t\t\"interface-name\": false,\n\t\t\"no-console\": false,\n\t\t\"no-submodule-imports\": false,\n\t\t\"no-for-in-array\": true,\n\t\t\"only-arrow-functions\": true,\n\t\t\"no-duplicate-variable\": true,\n\t\t\"no-implicit-dependencies\": false,\n\t\t\"no-duplicate-switch-case\": true,\n\t\t\"no-invalid-template-strings\": true,\n\t\t\"no-string-literal\": false,\n\t\t\"jsx-boolean-value\": [\n\t\t\t\"never\"\n\t\t]\n\t}\n}\n```\nY eso es todo con respecto al formato en tiempo de desarrollo. Cada unos de estos archivos y configuraciones son completamente opcionales pero realmente han ayudado a mi equipo a escalar el c√≥digo y mantenerlo.\n### 1.2 Formato para Compilaci√≥n\nProbablemente esta parte no sea totalmente opcional, pero es muy importante por qu√© define el comportamiento del c√≥digo cuando se compila. Las configuraciones anteriores ayudan a los desarrolladores a entender el c√≥digo mientras se desarrolla pero tambi√©n necesitamos un formato para el compilador, para eso existe la configuraci√≥n de TypeScript, nuestro archivo tsconfig.json, este archivo es un poco m√°s agresivo con los mensajes y alertas para la mayor√≠a de los IDEs ya que detiene completamente la ejecuci√≥n de nuestra aplicaci√≥n sino se cumplen estrictamente sus reglas pero tiene muchos beneficios, entre ellos es el uso de memoria, por ejemplo con tsconfig podemos definir que se validen siempre los Null, que no se dejen variables sin declarar, que se haga un uso correcto de const y let, no dejar par√°metros y variables que no se usan, remover comentarios al vendor final, etc. \n\nEn fin todo esto esta dem√°s si ya conocemos TypeScript, este es nuestro archivo tsconfig que com√∫nmente usamos, es una base dado que cada proyecto requiere de diferentes configuraciones al compilador.\n```json\n{\n\t\"compilerOptions\": {\n\t\t\"baseUrl\": \".\",\n\t\t\"target\": \"es5\",\n\t\t\"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n\t\t\"allowJs\": true,\n\t\t\"skipLibCheck\": true,\n\t\t\"strict\": true,\n\t\t\"forceConsistentCasingInFileNames\": true,\n\t\t\"noUnusedLocals\": true,\n\t\t\"noUnusedParameters\": true,\n\t\t\"noEmit\": true,\n\t\t\"esModuleInterop\": true,\n\t\t\"module\": \"esnext\",\n\t\t\"moduleResolution\": \"node\",\n\t\t\"resolveJsonModule\": true,\n\t\t\"isolatedModules\": true,\n\t\t\"removeComments\": true,\n\t\t\"jsx\": \"preserve\"\n\t},\n\t\"exclude\": [\"node_modules\"],\n\t\"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\"]\n}\n```\n## 2. Dependencias de producci√≥n\n### 2.1 Prerenderizado\nEsta parte depende totalmente del tipo del proyecto ya que podemos tener una aplicaci√≥n en React como WebApp o bien como web normal, aqu√≠ es donde necesitamos definir si queremos indexar bien nuestro sitio web o no a los buscadores mas comunes como Google, Bing, Yandex, etc.\n\nPara prerenderizar nuestra aplicaci√≥n en React es posible hacerlo de varias formas:\n\n1. Headless Browser (Puppeter, JSDom)\n2. SSR (Next.js, After.js)\n3. CSR (Gatsby)\n\nEn este caso nosotros utilizamos la primera opci√≥n (Headless Browser) que consiste en montar la aplicaci√≥n en un servidor local a trav√©s de un navegador y luego hacer web scrapping para obtener todos los archivos html, css, js, ts, assets, etc. Esto y la t√©cnica de SSR incrementa el SEO en nuestra web y permite posicionarnos mejor en los buscadores, en este punto existe una peque√±a discusi√≥n entre si es mejor CSR o SSR para Google especialmente ya que los bots de Google constantemente se est√°n actualizando para indexar el contenido de una web escrita en alg√∫n Framework/Librer√≠a de JavaScript que no hacen uso de un DOM normal en su inicio.\n\nEn nuestro equipo usamos React-Snapshot para prerenderizar la aplicaci√≥n, esta librer√≠a permite montar la aplicaci√≥n en un servidor local y hacer web scrapping con JSDom. Anteriormente us√°bamos React-Snap que hace uso de Puppeter para prerenderizar pero tiene ciertos problemas al cargar los estilos para cada pagina, este error lo causa React-Router. \nEste es el archivo index.js que utilizamos en la mayor√≠a de los casos para react-snapshot. El √∫nico inconveniente con este paquete es que no tiene compatibilidad con TypeScript pero podemos ignorarlo.\n```tsx\nimport React from 'react'\n\n// @ts-ignore\nimport { render } from 'react-snapshot'\n\n// COMPONENTES\nimport App from 'Components/App/App'\n\n// ESTILOS\nimport './index.css'\n\n// SERVICE WORKER\nimport * as sw from './serviceWorker'\n\n// RENDER\nconst root: HTMLDivElement | null = document.getElementById('root') as HTMLDivElement\nconst app: JSX.Element = (\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>\n)\n\n// RECARGAR\nrender(app, root)\n\n// REGISTRAR\nsw.register()\n```\n### 2.2 Firebase\nFirebase es entre muchas otras cosas una base de datos NoSQl (Realtime Database, Firestore), es una tecnolog√≠a creada por Google que permite tener funciones en la nube, autenticaci√≥n, base de datos, servidor push, entre otras muchas cosas, y lo mejor de todo es que su capa gratuita es bastante generosa por esa raz√≥n consideramos que es la opci√≥n perfecta para nuestras aplicaciones en React para darle una interacci√≥n en tiempo real. Firebase funciona muy bien para proyectos peque√±os o moderadamente escalables pero comparado con MongoDB este realmente se queda corto, aun as√≠ hay que considerar que MongoDB es solo la base de datos (NoSql) por lo que hay que construir todos los servicios por separado (Backend as a Service) esto unicamente si necesitamos una aplicaci√≥n que exige un rendimiento muy superior, pero en s√≠ntesis Firebase es excelente para peque√±os y medianos proyectos.\n\nCuando creamos un proyecto con Firebase mas all√° de instalar el paquete en npm, necesitamos la instancia de Firebase de nuestro proyecto en la consola, pero React constantemente esta actualizando el Virtual DOM en una aplicaci√≥n com√∫n, el problema de ello es que se pueden crear varias instancias de Firebase en un periodo muy reducido de tiempo por lo que el Error Handler de Firebase lanzara una alerta sobre el numero de instancias, para evitar esto agregamos el siguiente c√≥digo a nuestra instancia.\n```typescript\n// FIREBASE\nimport firebase from 'firebase/app'\nimport Key from './keys.json'\nimport 'firebase/auth'\n\n// EVITAR MAS DE UNA INSTANCIA\nif (!firebase.apps.length) firebase.initializeApp(Key)\n\n// EXPORTAR\nexport default firebase\n```\nPor ultimo importamos nuestras claves y nombres relacionados al proyecto desde un archivo externo JSON. Es importante mencionar que nos evitamos mostrar el uso de los archivos requeridos .firebaserc y firebase.json ya que estos dependen de las caracter√≠sticas de cada proyecto y ademas pueden ser generadas desde el CLI de Firebase-Tools.\n```json\n{\n\t\"apiKey\": \"\",\n\t\"authDomain\": \"\",\n\t\"databaseURL\": \"\",\n\t\"projectId\": \"\",\n\t\"storageBucket\": \"\",\n\t\"messagingSenderId\": \"\",\n\t\"appId\": \"\",\n\t\"measurementId\": \"\"\n}\n```\n### 2.3 Router\nEn este punto no hay mucho que mencionar considerando la popularidad del paquete React-Router y que al igual que muchas otras empresas y desarrolladores es una de las principales dependencias. Dicho esto siempre preparamos el componente App con el HOC de React Router para configurar las rutas. En nuestro equipo seguimos un patr√≥n bastante com√∫n en el desarrollo de aplicaciones para Android y es la convensi√≥n de Directorios | Textos | Layouts | Views y evidentemente el patr√≥n de arquitectura MVC.\n```tsx\n// REACT\nimport React from 'react'\n\n// ROUTER\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\n\n// STRINGS\nimport Strings from 'Lang/Strings.json'\n\n// PAGINAS\nimport Index from 'Pages/Index/Index'\n\n// CONTEXTO\nimport MainContext from 'Context/MainContext'\n\n// ESTADO\ninterface AppState {\n\tlangCode: string\n\tlang: ILangPackage\n}\n\n// ESTADO POR DEFECTO\nconst DefState: AppState = {\n\tlangCode: 'ES',\n\tlang: Strings.es,\n}\n\nconst App: React.FC = () => {\n\treturn (\n\t\t<MainContext.Provider value={{ ...DefState }}>\n\t\t\t<BrowserRouter>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path='/' component={Index} />\n\t\t\t\t</Switch>\n\t\t\t</BrowserRouter>\n\t\t</MainContext.Provider>\n\t)\n}\n\nexport default App\n```\nPara poder separar nuestros textos de nuestras vistas utilizamos Context API para servir un archivo JSON con todos los textos para cada pagina, para mejorar la experiencia en el editor con TypeScript siempre declaramos las interfaces y tipos de los textos en el JSON dentro de un archivo de declaraci√≥n d.ts, de esta manera sabemos exactamente que tipo de texto vamos a mostrar.\n```typescript\ninterface ILangs {\n\tes: ILangPackage\n}\n\ninterface ILangPackage {}\n```\nLa principal ventaja de este modelo es que no solo podemos organizar mejor a nuestros escritores y desarrolladores sino que nos permite actualizar todos los textos de nuestra aplicaci√≥n gracias a Context API de esta forma podemos servir diferentes lenguajes con solo cambiar el c√≥digo del lenguaje en nuestro JSON y gracias a que cada paquete de lenguaje sigue la misma interfaz global no tendremos que hacer ning√∫n cambio en el c√≥digo, ¬øgenial no?.\n## 3. ¬øVale la pena Redux?\nEn nuestro equipo consideramos que el rendimiento nativo de Context API es superior a Redux aunque probablemente crear cada hook, reducer o store lleva mas tiempo que usando Redux, vale mucho la pena si queremos aumentar el rendimiento, ademas esto no lo tendremos que hacer siempre es decir en un equipo se crean paquetes, estilos, funciones que se compartir√°n globalmente y para todos los proyectos y con esto podemos tener el control completo de todos los estados y stores en una aplicaci√≥n. React cada ves mejora a grandes pasos y no aprovechar sus propias funciones nativas puede ser contraproducente.\n\nExisten muchas cosas positivas de Redux como Redux-Saga, Redux-Persist pero seamos sinceros como desarrolladores ¬øRealmente es algo que no podemos hacer por nuestra cuenta?, eso queda a criterio de cada desarrollador y tampoco desear√≠a entrar en pol√©mica con este tema, as√≠ que de mi parte y como recomendaci√≥n personal Redux sale sobrando.\n## 4. Estilos\nConsideremos por un momento el uso de Styled-Components, ¬øRealmente vale la pena?, ¬øLo que me ofrece lo puedo hacer sin necesidad de c√≥digo de terceros?, ¬øImplica un cambio de paradigma?, cada una de estas preguntas es necesario responderlas cuando iniciamos un proyecto y pensemos en las tecnolog√≠as a implementar y no solo en el uso de Styled-Components. Personalmente no recomiendo el uso de librer√≠as que agreguen estilos grandes a mis componentes o que simplifiquen el uso de los mismos, v√©ase el uso de (Bootstrap, Materialize, Bulma) que aunque reconozco que son muy buenas como empresa le quitan valor a nuestra identidad. As√≠ como existen estas librer√≠as de componentes y estilos hay otras que simplemente no son necesarias o in√∫tiles, el ejemplo claro es el famoso paquete de npm de solo 2 lineas que causo problemas hace unos pocos meses, este y muchos otros son los factores por los que librer√≠as de este tipo pueden causar serios problemas.\n### 4.1 ¬øQue puedo usar en lugar de Styled-Components?\nEl principal problema con React y los estilos es que estos se sobre escriben por cada hoja de estilos que exista y entonces caemos en usar metodolog√≠as como BEM para separar clases de componentes, la soluci√≥n perfecta para este caso es CSS Modules una de las mejores tecnolog√≠as que podemos usar ya que nos permite tener una hoja de estilos para cada componente en un archivo CSS y que ademas creara la clases correspondientes a cada componente es decir ya no tenemos que especificar en la clase el componente al que le daremos estilos y por supuesto eliminamos el uso de BEM como metodolog√≠a.\n\nEn Create React App ya existe una implementaci√≥n de CSS modules por lo que lo podemos empezar a usar en cualquier momento y que ademas nos permite utilizar SASS y aun mejor SASS modules que es una extensi√≥n de CSS modules pero escrito en SASS. Es realmente una maravilla y como mencione anteriormente la idea principal es no cargar tanto c√≥digo inservible, SASS nos permite tener una hoja de estilos con muchas caracter√≠sticas agregadas de un lenguaje compilado como: Mixins, Variables, Funciones de calculo, Funciones aletorias, Iteraciones, etc, y que ademas todo se compila a css normal por lo que el FootPrint final de SASS es m√≠nimo por no decir nulo. En resumen a nivel de rendimiento siempre sera mejor utilizar estilos escritos por nosotros mismos.\n\nAnteriormente mencionamos librer√≠as de CSS como Bootstrap, Materialize y Bulma que aunque realmente simplifican el trabajo de dise√±o en un equipo la mayor√≠a de veces no utilizamos al 100% todas sus caracter√≠sticas o componentes y terminaremos con una aplicaci√≥n con la mitad de CSS y la otra mitad del c√≥digo donde apenas usamos el sistema de layouts de la librer√≠a. En nuestro equipo nos evitamos estos problemas agregando nuestros propios estilos y creando un tema general partiendo de esta hoja de estilos que incluye solamente algunos estilos de Normalize.css y Reset.css para empezar en un lienzo mas est√°ndar.\n```css\n* {\n\tpadding: 0;\n\tmargin: 0;\n\tbox-sizing: border-box;\n\tuser-select: none;\n\toutline: none;\n\t-webkit-user-drag: none;\n\t-webkit-tap-highlight-color: transparent;\n}\n\n*:focus {\n\toutline: none;\n}\n\n@mixin tab-focus() {\n\toutline: none;\n}\n\nbody {\n\t--white: #fff;\n\tfont-size: 15px;\n\toverflow-x: hidden;\n\tbackground:var(--white);\n}\n\n/* LISTAS */\n\nul,\nol {\n\tlist-style: none;\n}\n\n/* LINK */\n\na {\n\ttext-decoration: none;\n}\n\n@media screen and (max-width: 500px) {\n\tbody {\n\t\tfont-size: 14px;\n\t}\n}\n```\n## 5. Crea tu app ahora mismo\nPor ultimo me gustar√≠a mencionar que cada una de las tecnolog√≠as, metodolog√≠as, patrones y dise√±os solo son recomendaciones seg√∫n nuestra experiencia pero sabemos que pueden existir muchas otras buenas alternativas y diferentes combinaciones, si te gustar√≠a crear una aplicaci√≥n en React con estas caracter√≠sticas lista para producci√≥n te invitamos a descargar nuestra template de CRA (LUApp)\n\nEn ella encontraras todos los archivos mencionados, todos nuestros patrones y tecnolog√≠as para que empieces a crear una aplicaci√≥n en React realmente escalable.\n\n__MUCHAS GRACIAS POR LEER ESTE ARTICULO, RECUERDA COMPARTIRLO EN TUS REDES SOCIALES SI TE FUE UTIL Y NO OLVIDES CALIFICAR ESTE POST.__","author":"Alex Santos"}]}}